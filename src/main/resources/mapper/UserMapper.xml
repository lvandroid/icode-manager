<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bsty.icode.dao.UserDao">
    <resultMap id="getUserDTO" type="com.bsty.icode.dto.UserDTO">
        <id column="id" property="id"/>
        <result column="username" property="username"/>
        <result column="password" property="password"/>
        <result column="role_names" property="roleNames"/>
        <!--        <collection property="roles" ofType="com.bsty.icode.bean.Role">-->
        <!--            <id column="role_id" property="id"/>-->
        <!--            <result column="role_name" property="name"/>-->
        <!--            <result column="root_role" property="rootRole"/>-->
        <!--            <result column="role_description" property="description"/>-->
        <!--        </collection>-->
    </resultMap>
    <insert id="addUser" parameterType="com.bsty.icode.bean.User" useGeneratedKeys="true" keyProperty="id">
        insert into user(username, password, staff_id)
        values (#{username}, #{password}, #{staffId})
    </insert>
    <update id="updatePwd">
        update user as u
        set u.password = #{pwd}
        where u.id = #{userId}
    </update>
    <delete id="delUser">
        delete
        from user
        where id = #{userId}
    </delete>
    <select id="findUserByName" resultType="com.bsty.icode.bean.User">
        SELECT id, username, password
        FROM user
        WHERE username = #{username}
    </select>
    <select id="findRoleRootId" resultType="java.lang.Long">
        select ur.role_id
        from user_role ur
        where user_id = #{userId}
          and ur.root_role = true;
    </select>
    <select id="selectByParams" parameterType="com.bsty.icode.reqparams.UserParamDTO"
            resultMap="getUserDTO">
        select u.id as id,
        u.username as username,
        u.password as password,
        ur.role_id as role_id,
        r.name as role_name,
        ur.root_role as root_role,
        r.description as role_description,
        group_concat(r.name separator ' ') as role_names
        from user as u left join user_role as ur on u.id=ur.user_id
        left join role as r on ur.role_id=r.id
        <where>
            1=1
            <if test="username !=null and username!=''">
                and u.username like concat('%',#{username},'%')
            </if>
        </where>
        group by u.id
        <if test="sortMap!=null">
            ORDER BY
            <foreach collection="sortMap.entrySet()" separator="," index="key" item="value">
                ${key} ${value}
            </foreach>
        </if>
    </select>
    <select id="findUserRoles" resultType="java.lang.Long">
        select ur.role_id
        from user_role ur
        where user_id = #{userId}
          and ur.root_role = false
    </select>
    <select id="findUserRootId" resultType="java.lang.Long">
        select ur.role_id
        from user_role ur
        where user_id = #{userId}
          and ur.root_role = true;
    </select>
    <select id="findStaffById" resultType="java.lang.Long">
        select u.staff_id
        from user u
        where u.id = #{id}
    </select>

</mapper>